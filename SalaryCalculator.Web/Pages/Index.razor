@page "/"
@using System.Globalization
@using SalaryCalculator
@inject IExchangeRateProvider ExchangeRateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Salary Calculator</PageTitle>

<h1>Salary Calculator</h1>

<label for="basic_salary">Basic Salary : </label>
<input id="basic_salary" type="number" min="0" placeholder="Basic Salary" @oninput="AmountChanged" />
<br />
<br />
<button @onclick="OpenDeductionDialog" class="btn btn-primary">Add a deduction</button>
<hr />
<div class="row pb-2">
    <span><input type="checkbox" checked @onchange="SetUseSampleTiredAllowance" /> Add sample tierd allowance</span>
</div>
<div class="row pb-2">
    <div class="col" style="font-style:italic; color:gray">
        Add an taxable allowance of
        <span>
            <input type="radio" name="sample_allowance" @onchange=@((e)=>SetSampleAllowance(e,32.5m)) value="32.5" />
            32.5%
        </span>
        <span>
            <input type="radio" name="sample_allowance" @onchange=@((e)=>SetSampleAllowance(e,41m)) value="41" />
            41%
        </span>
        <span>
            <input type="radio" name="sample_allowance" @onchange=@((e)=>SetSampleAllowance(e,24m)) value="24" />
            24%
        </span>
        <span>
            <input type="radio" name="sample_allowance" checked @onchange=@((e)=>SetSampleAllowance(e)) value="none" />
            None
        </span>
    </div>
</div>
<button @onclick="OpenAllowanceDialog" class="btn btn-primary">Add another allowance</button>
<hr />

<span><input type="checkbox" checked @onchange="SetUseProposedTaxes" /> Use new tax to be effected from @(new DateTime(2023, 1, 1).ToString("yyyy/MMM/d", cultureInfo))</span>
@if (_useProposedTaxes)
{
    <div class="row pb-2">
        <div class="col">
            <span>
                <input type="radio" name="UseProposedTaxesMode" @onchange=@((e)=>SetUseProposedTaxesMode(TaxCalculators.NewAPITaxCalculator_Initial)) value="Initial" />
                Initial proposed scheme
            </span>
            <span>
                <input type="radio" name="UseProposedTaxesMode" checked @onchange=@((e)=>SetUseProposedTaxesMode(TaxCalculators.NewAPITaxCalculator_Proposed_On_22_10_11)) value="Latest" />
                Scheme proposed on @(new DateTime(2022, 10, 11).ToString("yyyy/MMM/d", cultureInfo)) (Now Active)
            </span>
        </div>
    </div>
}
@if (USDRate != null)
{
    <br />
    <span><input type="checkbox" @onchange="ShowPeggedChanged" disabled="@(USDRate==null)" /> Calculate USD pegged basic Salary</span>
    <br />
}

@if (_showPegged && USDRate != null)
{
    <span>Base exchange rate for pegging: <input type="number" min="0" placeholder="Base exchange rate" @oninput="BaseRateChanged" @attributes=baseRateAtts /></span>
    <br />
    <span><input type="checkbox" @onchange="UseAlternateBasicChanged" /> Use alternate basic salary</span>
    <br />
    if (_useAlternateBasic)
    {
        <span>Alternate Basic Salary: <input type="number" min="0" placeholder="Base exchange rate" @oninput="ALT_BasicSalaryChanged" @attributes=alt_BasicSalaryAtts /></span>
        <br />
    }
    <i>Curent Exchange Rate: <b>@USDRate.Selling.ToString("c",cultureInfo)</b> as of @USDRate.AsOf.ToOffset(new TimeSpan(5,30,0)).DateTime.ToString(cultureInfo.DateTimeFormat.FullDateTimePattern, cultureInfo) - Live Source <a href="https://www.sampath.lk/rates-and-charges?activeTab=exchange-rates" target="_blank">Sampath Bank</a></i>
}
<hr />


@if (_deductions?.Count > 0)
{
    <table>
        <tbody>
            <tr style="text-decoration:underline">
                <td>Deductions</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            @foreach (var item in _deductions)
            {
                <tr>
                    <td>@item.Value.Name @(item.Value.IsPercentage ? $"({item.Value.Amount}%)" : "")</td>
                    <td>@string.Format(cultureInfo,"{0:C2}", @item.Value.Value)</td>
                    <td>@(item.Value.IsTaxable ? "Taxable - ✓" : "Taxable - ✗")</td>
                    <td><button @onclick="()=>DeleteItem(item.Key,true)" class="btn btn-primary">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@if (_allowances.Count > 0)
{
    <table>
        <tbody>
            <tr style="text-decoration:underline">
                <td>Allowances</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            @foreach (var item in _allowances)
            {
                <tr>
                    <td>@item.Value.Name @(item.Value.IsPercentage ? $"({item.Value.Amount}%)" : "")</td>
                    <td>@string.Format(cultureInfo,"{0:C2}", @item.Value.Value)</td>
                    <td>@(item.Value.IsTaxable ? "Taxable - ✓" : "Taxable - ✗")</td>
                    @if (item.Key != SampleAllowanceGuid)
                    {
                        <td><button @onclick="()=>DeleteItem(item.Key,false)" class="btn btn-primary">Delete</button></td>
                    }
                    @if (item.Key == SampleAllowanceGuid && canShowPegged)
                    {
                        <td style="font-style:italic; color:gray">Not applied for USD pegged calculations</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@if (_useSampleTiredAllowance && _tierAllowanceResponse != null)
{
    <table>
        <tbody>
            <tr style="text-decoration:underline">
                <td>Tierd Allowance</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td>@_tierAllowanceResponse.SchemeName</td>
                <td>@string.Format(cultureInfo,"{0:C2}", _tierAllowanceResponse.Total)</td>
                <td>@(_tierAllowanceResponse.Description)</td>
                <td>@(_tierAllowanceResponse.TierdAllowances.All(x => x.IsTaxable) ? "Taxable - ✓" : _tierAllowanceResponse.TierdAllowances.Any(x => x.IsTaxable) ? "Taxable - Only some tiers" : "Taxable - ✗")</td>
                @if (canShowPegged)
                {
                    <td style="font-style:italic; color:gray">Not applied for USD pegged calculations</td>
                }
            </tr>
        </tbody>
    </table>
}

<ModalDialog @ref="_dialog"
             OnOpen="OnOpen"
             OnClose="OnClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>@Title</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                @Text
            </div>
            <div class="row pb-2">
                Description: <input class="form-control w-100" @oninput="ModalNameChanged" />
            </div>
            <div class="row pb-2">
                <span>
                    <input type="radio" name="amount_type" checked @onchange=@(()=>SetAmountType("value")) />
                    Value @(_isAddingDeduction ? "deduction" : "allowance")
                </span>
                <span>
                    <input type="radio" name="amount_type" @onchange=@(()=>SetAmountType("percentage")) />
                    Percentage @(_isAddingDeduction ? "deduction" : "allowance")
                </span>
            </div>
            <div class="row pb-2">
                Amount: <input class="form-control w-100" type="number" @oninput="ModalAmountChanged" />
            </div>
            <div class="row pb-2">
                <span><input type="checkbox" @bind="_isTaxable" /> Is Taxable</span>
            </div>
        </div>
    </Content>
    <Footer>
        @*If you want to hide Header remove the whole Footer definition"*@
        <button class="btn btn-warning ml-2" @onclick="CancelDialog">Cancel</button>
        <button class="btn btn-primary ml-2" @onclick="AcceptDialog" disabled="@isModalInValid">Ok</button>
    </Footer>
</ModalDialog>

<hr style="border: 2px solid black;" />
@if (details is not null && details.NetSalary > 0)
{
    <table>
        @if (_showPegged && USDRate != null)
        {
            <thead>
                <tr>
                    <th></th>
                    <th></th>
                    <th>USD Pegged values</th>
                </tr>
            </thead>
        }
        <tbody>
            <tr>
                <td>Basic Salary</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.BasicSalary)</td>
                @if (canShowPegged)
                {
                    <td>
                        @string.Format(cultureInfo, "{0:C2}", peggedDetails.BasicSalary);
                    </td>
                }
            </tr>

            <tr>
                <td>Gross Salary</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.GrossSalary)</td>
                @if (canShowPegged)
                {
                    <td>
                        <span>@string.Format(cultureInfo,"{0:C2}", peggedDetails.GrossSalary)</span>
                    </td>
                }
            </tr>

            <tr>
                <td>Total for Tax</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.TotalForTax)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", peggedDetails.TotalForTax)</td>
                }
            </tr>

            <tr><td><br /></td></tr>
            <tr style="text-decoration:underline">
                <td>Deductions</td>
                <td></td>
            </tr>
            @if (details.Deductions?.Count > 0)
            {
                @foreach (var item in details.Deductions)
                {
                    <tr>
                        <td>@item.Name @(item.IsPercentage ? $"({item.Amount}%)" : "")</td>
                        <td>@string.Format(cultureInfo,"{0:C2}", @item.Value)</td>
                        @if (canShowPegged)
                        {
                            var d = peggedDetails.Deductions?.FirstOrDefault(x => x.Name == item.Name && x.Amount == item.Amount && x.IsPercentage == item.IsPercentage && x.IsTaxable == item.IsTaxable);
                            if (d != null)
                            {
                                <td>@string.Format(cultureInfo,"{0:C2}", @d.Value)</td>
                            }
                        }
                    </tr>
                }
            }
            <tr>
                <td>EPF</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.TotalEmployeeContribution)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.EPFETFContributions.TotalEmployeeContribution)</td>
                }
            </tr>
            @if (details.TaxAmount > 0 || (canShowPegged && peggedDetails.TaxAmount > 0))
            {
                <tr>
                    <td>API Tax</td>
                    @if (details.TaxAmount > 0)
                    {
                        <td>@string.Format(cultureInfo,"{0:C2}", @details.TaxAmount)</td>
                    }
                    @if (canShowPegged && peggedDetails.TaxAmount > 0)
                    {
                        <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.TaxAmount)</td>
                    }
                </tr>
            }
            <tr style="font-weight:bold;">
                <td>Total Deductions</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.TotalDeductions)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.TotalDeductions)</td>
                }
            </tr>
            <tr><td><br /></td></tr>
            <tr style="font-weight:bold;text-decoration:underline">
                <td>Net Salary</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.NetSalary)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.NetSalary)</td>
                }
            </tr>
            <tr><td><br /></td></tr>
            <tr style="text-decoration:underline">
                <td>Employer Contributions</td>
                <td></td>
            </tr>
            <tr>
                <td>EPF</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.EPFEmployer)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.EPFETFContributions.EPFEmployer)</td>
                }
            </tr>
            <tr>
                <td>ETF</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.ETFEmployer)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.EPFETFContributions.ETFEmployer)</td>
                }
            </tr>
            <tr><td></td></tr>
            <tr style="font-weight:bold;">
                <td>Total Employer Contribution</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.TotalEmployerContribution)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.EPFETFContributions.TotalEmployerContribution)</td>
                }
            </tr>
            <tr><td><br /></td></tr>
            <tr style="font-weight:bold;">
                <td>Total EPF ETF Contribution</td>
                <td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.TotalContribution)</td>
                @if (canShowPegged)
                {
                    <td>@string.Format(cultureInfo,"{0:C2}", @peggedDetails.EPFETFContributions.TotalContribution)</td>
                }
            </tr>
        </tbody>
    </table>
    <hr style="border: 2px solid black;" />
}



@code {
    //Initial Lines
    private readonly Guid SampleAllowanceGuid = new Guid("edbfa563-c93f-4f90-9f71-24fc545cc066");
    private const string SampleAllowanceName = "TCoLA";
    //private const decimal SampleAllowancePercentage = 32.5m;
    private decimal? _sampleAllowancePercentage;// = SampleAllowancePercentage;
    private readonly List<Data.SalaryLineItemModel> otherFixedDeductions = new List<Data.SalaryLineItemModel> { new Data.SalaryLineItemModel("Staff Wellfare", 75m, false, false) };
    //private List<SalaryLineItem> fixedAllowances = new List<SalaryLineItem> { new SalaryLineItem("TCoLA", 32.5m, true) };

    private IExchangeRate? USDRate;
    private bool _showPegged = false;
    private bool _useAlternateBasic = false;
    private decimal baseRate = 200;
    private decimal alt_BasicSalary = 0;

    //Tax Calculator selection
    bool _useProposedTaxes = true;
    SalaryCalculator.TaxCalculators _useProposedTaxCalculator = TaxCalculators.NewAPITaxCalculator_Proposed_On_22_10_11;
    private SalaryCalculator.ITaxCalculator taxCalculator = SalaryCalculator.TaxCalculatorFactory.GetTaxCalculator(TaxCalculators.NewAPITaxCalculator_Proposed_On_22_10_11);

    private bool _isAddingDeduction;

    private Dictionary<Guid, Deduction> _deductions = new();
    private Dictionary<Guid, Allowance> _allowances = new();

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        var browserLocale = await JSRuntime.InvokeAsync<string>("getCulture");
    //        if (!string.IsNullOrWhiteSpace(browserLocale))
    //        {
    //            try
    //            {
    //                cultureInfo = CultureInfo.GetCultureInfo(browserLocale, true);
    //            }
    //            catch
    //            {
    //                cultureInfo = new CultureInfo("si-LK");
    //            }
    //        }
    //    }
    //    await base.OnAfterRenderAsync(firstRender);
    //}

    private CultureInfo cultureInfo = new CultureInfo("en-GB");

    protected override async Task OnInitializedAsync()
    {
        cultureInfo.NumberFormat.CurrencySymbol = "Rs ";

        _tempDeductions = otherFixedDeductions.ToDictionary(x => Guid.NewGuid(), y => y);
        //_allowances = new Dictionary<Guid, Allowance> { { SampleAllowanceGuid, new Allowance(SampleAllowanceName, SampleAllowancePercentage, true) } };
        try
        {
            USDRate = await ExchangeRateProvider.GetExchangeRate(CurrencyCode.USD);
        }
        catch
        {
            USDRate = null;
        }

        Calculate();
    }


    private decimal basicSalary = 0;

    private decimal basicForPegging => _useAlternateBasic ? alt_BasicSalary : basicSalary;
    private bool canShowPegged => _showPegged && basicForPegging > 0 && baseRate > 0 && USDRate != null && peggedDetails != null;


    private SalaryCalculator.SalaryDetails? details = null;

    private void AmountChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (!decimal.TryParse((string?)args.Value, out basicSalary) || basicSalary < 0)
        {
            basicSalary = 0;
        }
        Calculate();
    }

    private bool _useSampleTiredAllowance = true;
    private ITierdAllowanceScheme _sampleTiredAllowanceScheme = TierdAllowanceSchemeFactory.GetTiredAllowanceScheme(TierdAllowanceSchemes.IFS_April2023);

    private void SetUseSampleTiredAllowance(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        _useSampleTiredAllowance = (bool?)args.Value ?? true;
        Calculate();
    }
    private void SetSampleAllowance(Microsoft.AspNetCore.Components.ChangeEventArgs args, decimal? value = null)
    {
        if (value.HasValue)
        {
            _sampleAllowancePercentage = value.Value;
            _tempAllowances[SampleAllowanceGuid] = new Data.SalaryLineItemModel(SampleAllowanceName, _sampleAllowancePercentage.Value, true, true);
        }
        else
        {
            _sampleAllowancePercentage = null;
            if (_tempAllowances.ContainsKey(SampleAllowanceGuid))
            {
                _tempAllowances.Remove(SampleAllowanceGuid);
            }
        }
        Calculate();
    }

    private void ALT_BasicSalaryChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (decimal.TryParse((string)args.Value, out decimal v))
        {
            alt_BasicSalary = v;
        }
        else
        {
            alt_BasicSalary = 0;
        }
        CalculatePegged();
    }

    private void BaseRateChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (decimal.TryParse((string)args.Value, out decimal v))
        {
            baseRate = v;
        }
        else
        {
            baseRate = 0;
        }
        CalculatePegged();
    }

    Dictionary<string, object> baseRateAtts;

    private void ShowPeggedChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        _showPegged = (bool?)args.Value ?? false;
        if (_showPegged)
        {
            baseRateAtts = new Dictionary<string, object> { { "value", baseRate } };
            _useAlternateBasic = false;
        }
        Calculate();
    }

    private void SetUseProposedTaxes(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        _useProposedTaxes = (bool?)args.Value ?? false;
        if (_useProposedTaxes)
        {
            //Resetting proposed tax calculator to match with defult checked Radio Button
            _useProposedTaxCalculator = TaxCalculators.NewAPITaxCalculator_Proposed_On_22_10_11;
        }
        SetTaxCalculator();
    }

    private void SetUseProposedTaxesMode(SalaryCalculator.TaxCalculators calculator)
    {
        _useProposedTaxCalculator = calculator;
        SetTaxCalculator();
    }

    private void SetTaxCalculator()
    {
        if (_useProposedTaxes)
        {
            taxCalculator = SalaryCalculator.TaxCalculatorFactory.GetTaxCalculator(_useProposedTaxCalculator);
        }
        else
        {
            taxCalculator = SalaryCalculator.TaxCalculatorFactory.GetTaxCalculator(TaxCalculators.APITaxCalculator_Old);
        }
        Calculate();
    }


    Dictionary<string, object> alt_BasicSalaryAtts;

    private void UseAlternateBasicChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        _useAlternateBasic = (bool?)args.Value ?? false;

        if (_useAlternateBasic)
        {
            alt_BasicSalaryAtts = new Dictionary<string, object> { { "value", alt_BasicSalary } };
        }
        CalculatePegged();
    }

    TierdllowanceResponse? _tierAllowanceResponse = null;

    private void Calculate()
    {
        _allowances = _tempAllowances?.ToDictionary(x => x.Key, y => y.Value.GetAllowance(basicSalary)) ?? new Dictionary<Guid, Allowance>();
        _deductions = _tempDeductions?.ToDictionary(x => x.Key, y => y.Value.GetDeduction(basicSalary)) ?? new Dictionary<Guid, Deduction>();
        if (_useSampleTiredAllowance)
        {
            details = new SalaryCalculator.SalaryDetails(taxCalculator, basicSalary, _sampleTiredAllowanceScheme, allowances: _allowances?.Values.ToList(), deductions: _deductions?.Values.ToList());
            _tierAllowanceResponse = _sampleTiredAllowanceScheme.GetTierdAllowance(basicSalary);
        }
        else
        {
            details = new SalaryCalculator.SalaryDetails(taxCalculator, basicSalary, allowances: _allowances?.Values.ToList(), deductions: _deductions?.Values.ToList());
            _tierAllowanceResponse = null;
        }

        CalculatePegged();
    }

    private SalaryDetails? peggedDetails = null;

    private void CalculatePegged()
    {
        if (_showPegged && basicForPegging > 0 && baseRate > 0 && USDRate != null)
        {

            var al = _tempAllowances?.Where(x => x.Key != SampleAllowanceGuid).ToDictionary(x => x.Key, y => y.Value.GetAllowance(basicForPegging)) ?? new Dictionary<Guid, Allowance>();
            var de = _tempDeductions?.ToDictionary(x => x.Key, y => y.Value.GetDeduction(basicForPegging)) ?? new Dictionary<Guid, Deduction>();

            var gross = basicForPegging / baseRate * USDRate.Selling;
            var alId = Guid.NewGuid();
            al.Add(alId, new Allowance("Pegged Allowance", gross - basicForPegging, true));

            peggedDetails = new SalaryCalculator.SalaryDetails(taxCalculator, basicForPegging, allowances: al?.Values.ToList(), deductions: de?.Values.ToList());
        }
        else
        {
            peggedDetails = null;
        }
    }

    private void DeleteItem(Guid id, bool isADeduction)
    {
        if (isADeduction && _tempDeductions.ContainsKey(id))
            _tempDeductions.Remove(id);
        else if (!isADeduction && _tempAllowances.ContainsKey(id))
            _tempAllowances.Remove(id);

        Calculate();
    }

    #region Modal
    public async Task OpenDeductionDialog()
    {
        _isAddingDeduction = true;
        _isTaxable = false;
        await _dialog.Open();
    }

    public async Task OpenAllowanceDialog()
    {
        _isAddingDeduction = false;
        _isTaxable = true;
        await _dialog.Open();
    }

    public string Title => $"Add a {(_isAddingDeduction ? "deduction" : "allowance")}";
    public string Text => $"Please enter {(_isAddingDeduction ? "deduction" : "allowance")} reason and amount";

    private bool isModalInValid => string.IsNullOrWhiteSpace(_name) || _value < 1;

    private ModalDialog _dialog;
    private string _name;
    private string _amount;
    private decimal _value;
    private bool _isPercentageAmount;
    private bool _isTaxable;

    private void SetAmountType(string type)
    {
        switch (type)
        {
            case "percentage":
                {
                    _isPercentageAmount = true;
                    break;
                }
            default:
                _isPercentageAmount = false;
                break;
        }
    }

    private void ModalAmountChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace((string)args.Value))
            _value = 0;

        if (!decimal.TryParse((string)args.Value, out _value))
        {
            _value = -1;
        }
    }

    private void ModalNameChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        _name = (string)args.Value;
    }

    public async Task OpenDialog()
    {
        await _dialog.Open();
    }

    private Dictionary<Guid, Data.SalaryLineItemModel> _tempAllowances = new();
    private Dictionary<Guid, Data.SalaryLineItemModel> _tempDeductions = new();

    private async Task AcceptDialog()
    {
        if (_dialog.IsOpen)
        {
            if (_isAddingDeduction)
            {
                _tempDeductions.Add(Guid.NewGuid(), new(_name, _value, _isPercentageAmount, _isTaxable));
            }
            else
            {
                _tempAllowances.Add(Guid.NewGuid(), new(_name, _value, _isPercentageAmount, _isTaxable));
            }

            await _dialog.Close();

            Calculate();
        }
    }
    private async Task CancelDialog()
    {
        await _dialog.Close();
    }
    public async Task OnOpen()
    {
        _name = null;
        _amount = null;
    }
    public async Task OnClose()
    {
        _name = null;
        _amount = null;
    }
    #endregion Modal
}