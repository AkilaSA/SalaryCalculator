@page "/"
@using System.Globalization
@using SalaryCalculator
@inject IExchangeRateProvider ExchangeRateProvider

<PageTitle>Salary Calculator</PageTitle>

<h1>Salary Calculator</h1>

<input type="number" min="0" placeholder="Basic Salary" @oninput="AmountChanged" />
<br />
<br />
<button @onclick="OpenDeductionDialog" class="btn btn-primary">Add a deduction</button>
<button @onclick="OpenAllowanceDialog" class="btn btn-primary">Add a fixed allowance</button>
<br />
<br />

<span><input type="checkbox" @onchange="ShowPeggedChanged" /> Calculate USD pegged basic Salary</span>
<br />

@if (_showPegged)
{
	<span>Base exchange rate for pegging: <input type="number" min="0" placeholder="Base exchange rate" @oninput="BaseRateChanged" @attributes=baseRateAtts /></span>
	<br />
	<span><input type="checkbox" @onchange="UseAlternateBasicChanged" /> Use alternate basic salary</span>
	<br />
	if (_useAlternateBasic)
	{
		<span>Alternate Basic Salary: <input type="number" min="0" placeholder="Base exchange rate" @oninput="ALT_BasicSalaryChanged" @attributes=alt_BasicSalaryAtts /></span>
		<br />
	}
	<i>Curent Exchange Rate: <b>@USDRate.Selling.ToString("c",cultureInfo)</b> as of @USDRate.AsOf.ToOffset(new TimeSpan(5,30,0)).DateTime.ToString("yyyy/MMM/d tth:m:s",cultureInfo) - Live Source <a href="https://www.sampath.lk/en/exchange-rates">Sampath Bank</a></i>

	<br />
}
<br />


@if (_otherFixedDeductions?.Count > 0)
{
	<table>
		<tbody>
			<tr style="text-decoration:underline">
				<td>Deductions</td>
				<td></td>
			</tr>
			@foreach (var item in _otherFixedDeductions)
			{
				<tr>
					<td>@item.Value.Name @(item.Value.IsPercentage?$"({item.Value.Amount}%)":"")</td>
					<td>@string.Format(cultureInfo,"{0:C2}", @item.Value.GetValue(basicSalary))</td>
					<td><button @onclick="()=>DeleteItem(item.Key,true)" class="btn btn-primary">Delete</button></td>
				</tr>
			}
		</tbody>
	</table>
}
<br />

@if (_fixedAllowances?.Count > 0)
{
	<table>
		<tbody>
			<tr style="text-decoration:underline">
				<td>Fixed Allowances</td>
				<td></td>
			</tr>
			@foreach (var item in _fixedAllowances)
			{
				<tr>
					<td>@item.Value.Name @(item.Value.IsPercentage?$"({item.Value.Amount}%)":"")</td>
					<td>@string.Format(cultureInfo,"{0:C2}", @item.Value.GetValue(basicSalary))</td>
					<td><button @onclick="()=>DeleteItem(item.Key,false)" class="btn btn-primary">Delete</button></td>
				</tr>
			}
		</tbody>
	</table>
}

<ModalDialog @ref="_dialog"
			 OnOpen="OnOpen"
			 OnClose="OnClose">
	<Header>
		@*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
		<h4>@Title</h4>
	</Header>
	<Content>
		<div class="container">
			<div class="row pb-2">
				@Text
			</div>
			<div class="row pb-2">
				Description: <input class="form-control w-100" @oninput="ModalNameChanged" />
			</div>
			<div class="row pb-2">
				<span>
					<input type="radio" name="amount_type" checked @onchange=@(()=>SetAmountType("value")) />
					Value @(_isAddingDeduction?"deduction":"allowance")
				</span>
				@*			</div>
					<div class="row pb-2">*@
				<span>
					<input type="radio" name="amount_type" @onchange=@(()=>SetAmountType("percentage")) />
					Percentage @(_isAddingDeduction?"deduction":"allowance")
				</span>
			</div>
			<div class="row pb-2">
				Amount: <input class="form-control w-100" type="number" @oninput="ModalAmountChanged" />
			</div>
		</div>
	</Content>
	<Footer>
		@*If you want to hide Header remove the whole Footer definition"*@
		<button class="btn btn-warning ml-2" @onclick="CancelDialog">Cancel</button>
		<button class="btn btn-primary ml-2" @onclick="AcceptDialog" disabled="@isModalInValid">Ok</button>
	</Footer>
</ModalDialog>

<br />
<hr />
@if (details is not null && details.NetSalary > 0)
{
	<table>
		@if (_showPegged)
		{
			<thead>
				<tr>
					<th></th>
					<th></th>
					<th>USD Pegged values</th>
				</tr>
			</thead>
		}
		<tbody>
			<tr>
				<td>Basic Salary</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.BasicSalary)</td>
				@if (_showPegged && basicForPegging > 0 && baseRate > 0)
				{
					<td>
						<span>@string.Format(cultureInfo,"{0:C2}", basicForPegging/baseRate*USDRate.Selling)</span>
						@if (_useAlternateBasic)
						{
							<span>&nbsp; <i>(For Basic Salary of @string.Format(cultureInfo,"{0:C2}", alt_BasicSalary))</i></span>
						}
					</td>
				}
			</tr>
			@if (details.BasicSalary != details.GrossSalary)
			{
				<tr>
					<td>Gross Salary</td>
					<td>@string.Format(cultureInfo,"{0:C2}", @details.GrossSalary)</td>
				</tr>
			}

			<tr><td><br /></td></tr>
			<tr style="text-decoration:underline">
				<td>Deductions</td>
				<td></td>
			</tr>
			@if (details.OtherFixedDeductions?.Count > 0)
			{
				@foreach (var item in details.OtherFixedDeductions)
				{
					<tr>
						<td>@item.Name @(item.IsPercentage?$"({item.Amount}%)":"")</td>
						<td>@string.Format(cultureInfo,"{0:C2}", @item.GetValue(details.BasicSalary))</td>
					</tr>
				}
			}
			<tr>
				<td>EPF</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.TotalEmployeeContribution)</td>
			</tr>
			@if (details.TaxAmount > 0)
			{
				<tr>
					<td>API Tax</td>
					<td>@string.Format(cultureInfo,"{0:C2}", @details.TaxAmount)</td>
				</tr>
			}
			<tr style="font-weight:bold;">
				<td>Total Deductions</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.TotalDeductions)</td>
			</tr>
			<tr><td><br /></td></tr>
			<tr style="font-weight:bold;text-decoration:underline">
				<td>Net Salary</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.NetSalary)</td>
			</tr>
			<tr><td><br /></td></tr>
			<tr style="text-decoration:underline">
				<td>Employer Contributions</td>
				<td></td>
			</tr>
			<tr>
				<td>EPF</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.EPFEmployer)</td>
			</tr>
			<tr>
				<td>ETF</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.ETFEmployer)</td>
			</tr>
			<tr><td></td></tr>
			<tr style="font-weight:bold;">
				<td>Total Employer Contribution</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.TotalEmployerContribution)</td>
			</tr>
			<tr><td><br /></td></tr>
			<tr style="font-weight:bold;">
				<td>Total EPF ETF Contribution</td>
				<td>@string.Format(cultureInfo,"{0:C2}", @details.EPFETFContributions.TotalContribution)</td>
			</tr>
		</tbody>
	</table>
}



@code {
	//Initial Lines
	private readonly List<SalaryLineItem> otherFixedDeductions = new List<SalaryLineItem> { new SalaryLineItem("Staff Wellfare", 75, false) };
	private readonly List<SalaryLineItem> fixedAllowances = new List<SalaryLineItem> { new SalaryLineItem("TCoLA", 24, true) };

	private IExchangeRate USDRate;
	private bool _showPegged = false;
	private bool _useAlternateBasic = false;
	private decimal baseRate = 200;
	private decimal alt_BasicSalary = 0;

	private bool _isAddingDeduction;

	private Dictionary<Guid, SalaryLineItem> _otherFixedDeductions { get; set; }
	private Dictionary<Guid, SalaryLineItem> _fixedAllowances { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_otherFixedDeductions = otherFixedDeductions.ToDictionary(x => Guid.NewGuid(), y => y);
		_fixedAllowances = fixedAllowances.ToDictionary(x => Guid.NewGuid(), y => y);
		USDRate = await ExchangeRateProvider.GetExchangeRate(CurrencyCode.USD);

		Calculate();
	}

	private CultureInfo cultureInfo = new CultureInfo("si-LK");

	private decimal basicSalary = 0;
	private decimal basicForPegging => _useAlternateBasic ? alt_BasicSalary : basicSalary;

	private SalaryCalculator.SalaryDetails? details = null;

	private void AmountChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		if (decimal.TryParse((string)args.Value, out basicSalary))
		{
			Calculate();
		}
		else
		{
			details = null;
		}
	}

	private void ALT_BasicSalaryChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		if (decimal.TryParse((string)args.Value, out decimal v))
		{
			alt_BasicSalary = v;
		}
		else
		{
			alt_BasicSalary = 0;
		}
	}

	private void BaseRateChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		if (decimal.TryParse((string)args.Value, out decimal v))
		{
			baseRate = v;
		}
		else
		{
			baseRate = 0;
		}
	}

	Dictionary<string, object> baseRateAtts;

	private void ShowPeggedChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		_showPegged = (bool?)args.Value ?? false;
		if (_showPegged)
		{
			baseRateAtts = new Dictionary<string, object> { { "value", baseRate } };
			_useAlternateBasic = false;
		}
		Calculate();
	}

	Dictionary<string, object> alt_BasicSalaryAtts;

	private void UseAlternateBasicChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		_useAlternateBasic = (bool?)args.Value ?? false;

		if (_useAlternateBasic)
		{
			alt_BasicSalaryAtts = new Dictionary<string, object> { { "value", alt_BasicSalary } };
		}
		//Calculate();
	}

	private void Calculate()
	{
		details = new SalaryCalculator.SalaryDetails(basicSalary, fixedAllowances: _fixedAllowances?.Values.ToList(), otherFixedDeductions: _otherFixedDeductions?.Values.ToList());
	}

	//private decimal GetAmount((string,string,))

	private void DeleteItem(Guid id, bool isADeduction)
	{
		if (isADeduction && _otherFixedDeductions.ContainsKey(id))
			_otherFixedDeductions.Remove(id);
		else if (!isADeduction && _fixedAllowances.ContainsKey(id))
			_fixedAllowances.Remove(id);

		Calculate();
	}

	#region Modal
	public async Task OpenDeductionDialog()
	{
		_isAddingDeduction = true;
		await _dialog.Open();
	}

	public async Task OpenAllowanceDialog()
	{
		_isAddingDeduction = false;
		await _dialog.Open();
	}

	public string Title => $"Add a {(_isAddingDeduction ? "deduction" : "allowance")}";
	public string Text => $"Please enter {(_isAddingDeduction ? "deduction" : "allowance")} reason and amount";

	private bool isModalInValid => string.IsNullOrWhiteSpace(_name) || _value < 1;

	private ModalDialog _dialog;
	private string _name;
	private string _amount;
	private decimal _value;
	private bool _isPercentageAmount;

	private void SetAmountType(string type)
	{
		switch (type)
		{
			case "percentage":
				{
					_isPercentageAmount = true;
					break;
				}
			default:
				_isPercentageAmount = false;
				break;
		}
	}

	private void ModalAmountChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		if (string.IsNullOrWhiteSpace((string)args.Value))
			_value = 0;

		if (!decimal.TryParse((string)args.Value, out _value))
		{
			_value = -1;
		}
	}

	private void ModalNameChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		_name = (string)args.Value;
	}

	public async Task OpenDialog()
	{
		await _dialog.Open();
	}

	private async Task AcceptDialog()
	{
		if (_dialog.IsOpen)
		{
			if (_isAddingDeduction)
				_otherFixedDeductions.Add(Guid.NewGuid(), new(_name, _value, _isPercentageAmount));
			else
				_fixedAllowances.Add(Guid.NewGuid(), new(_name, _value, _isPercentageAmount));

			await _dialog.Close();

			Calculate();
		}
	}
	private async Task CancelDialog()
	{
		await _dialog.Close();
	}
	public async Task OnOpen()
	{
		_name = null;
		_amount = null;
	}
	public async Task OnClose()
	{
		_name = null;
		_amount = null;
	}
	#endregion Modal
}